diff --git a/scene/__init__.py b/scene/__init__.py
index ccb10a5..d78b78e 100644
--- a/scene/__init__.py
+++ b/scene/__init__.py
@@ -78,7 +78,8 @@ class Scene:
             self.test_cameras[resolution_scale] = cameraList_from_camInfos(scene_info.test_cameras, resolution_scale, args)
             
         if args.loaded_pth:
-            self.gaussians.create_from_pth(args.loaded_pth, self.cameras_extent)
+            # self.gaussians.create_from_pth(args.loaded_pth, self.cameras_extent)
+            self.gaussians.restore(model_args=torch.load(args.loaded_pth)[0], training_args=None)
         else:
             if self.loaded_iter:
                 self.gaussians.load_ply(os.path.join(self.model_path,
diff --git a/scripts/n3v2blender.py b/scripts/n3v2blender.py
index c3d0446..c010a62 100644
--- a/scripts/n3v2blender.py
+++ b/scripts/n3v2blender.py
@@ -301,7 +301,7 @@ if __name__ == '__main__':
         cam_frames = [{'file_path': im.lstrip("/").split('.')[0], 
                        'transform_matrix': poses[i].tolist(),
                        'time': int(im.lstrip("/").split('.')[0][-4:]) / 30.} for im in images if cams[i] in im]
-        if i == 0:
+        if i == N // 2: # middle camera
             test_frames += cam_frames
         else:
             train_frames += cam_frames
@@ -343,7 +343,7 @@ if __name__ == '__main__':
         f.write(f'1 PINHOLE {W} {H} {fx} {fy} {cx} {cy}')
         for frame in train_frames:
             if frame['time'] == 0:
-                fname = frame['file_path'].split('/')[-1] + '.png'
+                fname = frame['file_path'].split('/')[-1] + '.jpg'
                 pose = np.array(frame['transform_matrix']) @ blender2opencv
                 fname2pose.update({fname: pose})
                 
